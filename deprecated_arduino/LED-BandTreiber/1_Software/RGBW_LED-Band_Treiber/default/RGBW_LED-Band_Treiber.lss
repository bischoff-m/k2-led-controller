
RGBW_LED-Band_Treiber.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000506  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  00000506  0000059a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000209  0080016c  0080016c  000006a6  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000006a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000112  00000000  00000000  000006c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002ee  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014d  00000000  00000000  00000ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000527  00000000  00000000  00000c13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  0000113c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a8  00000000  00000000  000011dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	13 e0       	ldi	r17, 0x03	; 3
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 37       	cpi	r26, 0x75	; 117
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ab 01 	call	0x356	; 0x356 <main>
  8a:	0c 94 81 02 	jmp	0x502	; 0x502 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_11>:
volatile const unsigned char sieben_seg[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x99, 0x6D, 0x7D, 0x07, 0x7F, 0x6F}; // High level will light the led	
volatile const unsigned char UBRR_DMX = 	1;	// Baud 250000 for DMX(RS485) comunication

//Inerrupt Routinen*****************************

ISR(USART_RXC_vect){	// with 250 kBaut and 10Bit per canel all 40us
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	ef 93       	push	r30
  a2:	ff 93       	push	r31
	cli();	// deactuvate inerrupts
  a4:	f8 94       	cli
	//Normal code begin
	dmxData[channelCounter] =	UDR;
  a6:	e0 91 6f 01 	lds	r30, 0x016F
  aa:	f0 91 70 01 	lds	r31, 0x0170
  ae:	8c b1       	in	r24, 0x0c	; 12
  b0:	ed 58       	subi	r30, 0x8D	; 141
  b2:	fe 4f       	sbci	r31, 0xFE	; 254
  b4:	80 83       	st	Z, r24
	channelCounter++;
  b6:	80 91 6f 01 	lds	r24, 0x016F
  ba:	90 91 70 01 	lds	r25, 0x0170
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	90 93 70 01 	sts	0x0170, r25
  c4:	80 93 6f 01 	sts	0x016F, r24
	
	// Sprechstunde KawoNet
	// ACHTUNG ENTFERNEN
	dmxData[256] = eye_correction[0xFF];
  c8:	9f ef       	ldi	r25, 0xFF	; 255
  ca:	90 93 73 02 	sts	0x0273, r25
	dmxData[257] = eye_correction[0xFF];
  ce:	90 93 74 02 	sts	0x0274, r25
	dmxData[258] = eye_correction[0xE0];
  d2:	8d e9       	ldi	r24, 0x9D	; 157
  d4:	80 93 75 02 	sts	0x0275, r24
	dmxData[259] = eye_correction[0xFF];
  d8:	90 93 76 02 	sts	0x0276, r25
	// Ende Sprechstunde

	sei();	// reactivate inerrupts
  dc:	78 94       	sei
}
  de:	ff 91       	pop	r31
  e0:	ef 91       	pop	r30
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <PortConfig>:

//Funktionen************************************

void PortConfig(void){
	// Port A ist Eingang für DMX Kanal-wahl Bit0 bis Bit7; Bit8 ist PB0 ; Achtung: umgekehte Reihefolge
	DDRA = 		0x00;		// Complete Port A is Input
  f0:	1a ba       	out	0x1a, r1	; 26
	PORTA =		0xFF;		// Aktivate all internal Pull Up Resistors for PortA
  f2:	9f ef       	ldi	r25, 0xFF	; 255
  f4:	9b bb       	out	0x1b, r25	; 27
	
	// Port B nur PB0 Eingang, der Rest wird duch andere Funktionen Definiert
	DDRB = 		PB_DDR;		// PWM_W (PB3=OC1) is output	
  f6:	88 e0       	ldi	r24, 0x08	; 8
  f8:	87 bb       	out	0x17, r24	; 23
	PORTB |=	PB_PULL_UP;	// S9 (PB0) activate Pull Up
  fa:	c0 9a       	sbi	0x18, 0	; 24
	
	// Port C hat nur Ausgänge
	DDRC =		PC_DDR;		// Complete Port C is an output
  fc:	94 bb       	out	0x14, r25	; 20
	PORTC |=	(1<<R_LED_YELLOW)|(1<<R_LED_GREEN)|(1<<L_LED_YELLOW)|(1<<L_LED_GREEN);	//LEDs off (= Pin high)
  fe:	85 b3       	in	r24, 0x15	; 21
 100:	80 6f       	ori	r24, 0xF0	; 240
 102:	85 bb       	out	0x15, r24	; 21
	PORTC &=	~((1<<TWI_SDA)|(1<<TWI_SCL));		// Data lines low
 104:	85 b3       	in	r24, 0x15	; 21
 106:	8c 7f       	andi	r24, 0xFC	; 252
 108:	85 bb       	out	0x15, r24	; 21

	// Port D wird von Funktionen gesteuert
	DDRD =		PD_DDR; 	// OC2, OC1A and OC1B must be set as Output to enable PWM output driver
 10a:	82 eb       	ldi	r24, 0xB2	; 178
 10c:	81 bb       	out	0x11, r24	; 17
}
 10e:	08 95       	ret

00000110 <UartConfig>:


void UartConfig(void){
	UBRRH = (unsigned char) (UBRR_DMX>>8);
 110:	80 91 6a 01 	lds	r24, 0x016A
 114:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) UBRR_DMX;
 116:	80 91 6a 01 	lds	r24, 0x016A
 11a:	89 b9       	out	0x09, r24	; 9
	// enable receiver, enable receiver inerrupt
	UCSRB =		(1<<RXEN)|(1<<RXCIE);	
 11c:	80 e9       	ldi	r24, 0x90	; 144
 11e:	8a b9       	out	0x0a, r24	; 10
	// 2stop bit, 8 bit
	UCSRC =		(1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
 120:	8e e8       	ldi	r24, 0x8E	; 142
 122:	80 bd       	out	0x20, r24	; 32

	//Enable receiver mode of the RS485 chip
	PORTC &= 	~((1<<NRE_RS485)|(1<<DE_RS485));	// /RE and DE low
 124:	85 b3       	in	r24, 0x15	; 21
 126:	83 7f       	andi	r24, 0xF3	; 243
 128:	85 bb       	out	0x15, r24	; 21
}
 12a:	08 95       	ret

0000012c <PwmConfig>:


void PwmConfig(void){ 	// kontrolliert KW21/2014 -> OK
	//TC0****************
	// Fast PWM Mode, Cleare OC0 on compare match (non inverting), clk/256
	TCCR0 = 	(1<<WGM00)|(1<<WGM01)|(2<<COM00)|(4<<CS00); 
 12c:	8c e6       	ldi	r24, 0x6C	; 108
 12e:	83 bf       	out	0x33, r24	; 51
	
	//TC1****************
	// Fast PWM in non inverting mode; 8-bit bottom to top; clk/256
	TCCR1A =	(2<<COM1A0)|(2<<COM1B0)|(1<<WGM10);
 130:	81 ea       	ldi	r24, 0xA1	; 161
 132:	8f bd       	out	0x2f, r24	; 47
	TCCR1B =	(1<<WGM12)|(4<<CS10);
 134:	8c e0       	ldi	r24, 0x0C	; 12
 136:	8e bd       	out	0x2e, r24	; 46

	//TC2****************
	// Fast PWM in non inverting mode; (8-bit bottom to top by default in TC2); clk/256
	TCCR2 =		(1<<WGM20)|(1<<WGM21)|(2<<COM20)|(6<<CS20);
 138:	8e e6       	ldi	r24, 0x6E	; 110
 13a:	85 bd       	out	0x25, r24	; 37
}
 13c:	08 95       	ret

0000013e <GetSelectedDmxChannel>:


// DIP-Switch at PORTA is with MSB First 
// This Routin changes the order.
unsigned short GetSelectedDmxChannel(void) {
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
	unsigned short 	y;
	unsigned char 	x, t, ShiftIndex, i;
	y= 	0;
	x = ~PINA;
 146:	59 b3       	in	r21, 0x19	; 25
 148:	50 95       	com	r21
 14a:	e0 e0       	ldi	r30, 0x00	; 0
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	64 e0       	ldi	r22, 0x04	; 4
 150:	70 e0       	ldi	r23, 0x00	; 0
	for(i=0;i<4;i++){
		ShiftIndex = ((i+1)<<1)-1;	// 1,3,5,7

		t =		(1<<(4+i));			// Maske Bilden
 152:	a1 e0       	ldi	r26, 0x01	; 1
 154:	b0 e0       	ldi	r27, 0x00	; 0
		t &= 	x;					// Datenbit herrausnehmen
		t = 	(t>>ShiftIndex); 	// high nible to low nible
		y |=	t;				

		t = 	(1<<(3-i));			// Maske auf low nible
 156:	c7 e0       	ldi	r28, 0x07	; 7
 158:	d0 e0       	ldi	r29, 0x00	; 0
	y= 	0;
	x = ~PINA;
	for(i=0;i<4;i++){
		ShiftIndex = ((i+1)<<1)-1;	// 1,3,5,7

		t =		(1<<(4+i));			// Maske Bilden
 15a:	cd 01       	movw	r24, r26
 15c:	06 2e       	mov	r0, r22
 15e:	02 c0       	rjmp	.+4      	; 0x164 <GetSelectedDmxChannel+0x26>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	0a 94       	dec	r0
 166:	e2 f7       	brpl	.-8      	; 0x160 <GetSelectedDmxChannel+0x22>
		t &= 	x;					// Datenbit herrausnehmen
		t = 	(t>>ShiftIndex); 	// high nible to low nible
 168:	46 2f       	mov	r20, r22
 16a:	44 0f       	add	r20, r20
 16c:	47 50       	subi	r20, 0x07	; 7
 16e:	25 2f       	mov	r18, r21
 170:	28 23       	and	r18, r24
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	04 2e       	mov	r0, r20
 176:	02 c0       	rjmp	.+4      	; 0x17c <GetSelectedDmxChannel+0x3e>
 178:	35 95       	asr	r19
 17a:	27 95       	ror	r18
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <GetSelectedDmxChannel+0x3a>
		y |=	t;				

		t = 	(1<<(3-i));			// Maske auf low nible
 180:	ce 01       	movw	r24, r28
 182:	86 1b       	sub	r24, r22
 184:	97 0b       	sbc	r25, r23
 186:	8d 01       	movw	r16, r26
 188:	02 c0       	rjmp	.+4      	; 0x18e <GetSelectedDmxChannel+0x50>
 18a:	00 0f       	add	r16, r16
 18c:	11 1f       	adc	r17, r17
 18e:	8a 95       	dec	r24
 190:	e2 f7       	brpl	.-8      	; 0x18a <GetSelectedDmxChannel+0x4c>
 192:	c8 01       	movw	r24, r16
		t &= 	x;					// Datenbit herrausnehmen
		t = 	(t<<ShiftIndex); 	// low nible to high nible
 194:	85 23       	and	r24, r21
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <GetSelectedDmxChannel+0x60>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	4a 95       	dec	r20
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <GetSelectedDmxChannel+0x5c>
		ShiftIndex = ((i+1)<<1)-1;	// 1,3,5,7

		t =		(1<<(4+i));			// Maske Bilden
		t &= 	x;					// Datenbit herrausnehmen
		t = 	(t>>ShiftIndex); 	// high nible to low nible
		y |=	t;				
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	28 2b       	or	r18, r24
 1a8:	39 2b       	or	r19, r25

		t = 	(1<<(3-i));			// Maske auf low nible
		t &= 	x;					// Datenbit herrausnehmen
		t = 	(t<<ShiftIndex); 	// low nible to high nible
		y |= 	t;
 1aa:	e2 2b       	or	r30, r18
 1ac:	f3 2b       	or	r31, r19
 1ae:	6f 5f       	subi	r22, 0xFF	; 255
 1b0:	7f 4f       	sbci	r23, 0xFF	; 255
unsigned short GetSelectedDmxChannel(void) {
	unsigned short 	y;
	unsigned char 	x, t, ShiftIndex, i;
	y= 	0;
	x = ~PINA;
	for(i=0;i<4;i++){
 1b2:	68 30       	cpi	r22, 0x08	; 8
 1b4:	71 05       	cpc	r23, r1
 1b6:	89 f6       	brne	.-94     	; 0x15a <GetSelectedDmxChannel+0x1c>
		t = 	(t<<ShiftIndex); 	// low nible to high nible
		y |= 	t;

	}
	// Bit number 9....
	x = 	~PINB;
 1b8:	86 b3       	in	r24, 0x16	; 22
 1ba:	80 95       	com	r24
 1bc:	38 2f       	mov	r19, r24
 1be:	31 70       	andi	r19, 0x01	; 1
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	2e 2b       	or	r18, r30
 1c4:	3f 2b       	or	r19, r31
	x &= 	(1<<S9);	// Mask to the Bit from S9
	y |= 	(x<<8);		// S9 Bit to Bit-positon 8 in y	
	return y;
}
 1c6:	c9 01       	movw	r24, r18
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	08 95       	ret

000001d2 <WriteDisplay>:


void WriteDisplay(unsigned int channel) {
 1d2:	1f 93       	push	r17
 1d4:	9c 01       	movw	r18, r24
	}
	d0 =	k-1;				// in d0 stehen die 1er
*/

	d2 =		channel/100;			// hunderter	
	d1 =		(channel-d2*100)/10;	// zehner
 1d6:	64 e6       	ldi	r22, 0x64	; 100
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	0e 94 6d 02 	call	0x4da	; 0x4da <__udivmodhi4>
 1de:	e6 2f       	mov	r30, r22
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	8c e9       	ldi	r24, 0x9C	; 156
 1e4:	9f ef       	ldi	r25, 0xFF	; 255
 1e6:	ac 01       	movw	r20, r24
 1e8:	e4 9f       	mul	r30, r20
 1ea:	c0 01       	movw	r24, r0
 1ec:	e5 9f       	mul	r30, r21
 1ee:	90 0d       	add	r25, r0
 1f0:	f4 9f       	mul	r31, r20
 1f2:	90 0d       	add	r25, r0
 1f4:	11 24       	eor	r1, r1
 1f6:	82 0f       	add	r24, r18
 1f8:	93 1f       	adc	r25, r19
 1fa:	6a e0       	ldi	r22, 0x0A	; 10
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	0e 94 6d 02 	call	0x4da	; 0x4da <__udivmodhi4>
 202:	16 2f       	mov	r17, r22
	d0 =		channel % 10;			// einer
 204:	c9 01       	movw	r24, r18
 206:	6a e0       	ldi	r22, 0x0A	; 10
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	0e 94 6d 02 	call	0x4da	; 0x4da <__udivmodhi4>
 20e:	38 2f       	mov	r19, r24
 210:	47 e0       	ldi	r20, 0x07	; 7
 212:	50 e0       	ldi	r21, 0x00	; 0

	// Schreiben auf Display; MSB voraus
	// Schreiben der dritten Stelle
	for(i=0;i<=7;i++){
		temp = 	sieben_seg[d2] & (1<<(7-i)); 		// Maske! Beginnend mit MSB
 214:	e0 5a       	subi	r30, 0xA0	; 160
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	e0 81       	ld	r30, Z
		temp = 	(temp>>(7-i));						// Bit schieben auf Position Null
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	cb 01       	movw	r24, r22
 220:	04 2e       	mov	r0, r20
 222:	02 c0       	rjmp	.+4      	; 0x228 <WriteDisplay+0x56>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	0a 94       	dec	r0
 22a:	e2 f7       	brpl	.-8      	; 0x224 <WriteDisplay+0x52>
 22c:	8e 23       	and	r24, r30
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	04 2e       	mov	r0, r20
 232:	02 c0       	rjmp	.+4      	; 0x238 <WriteDisplay+0x66>
 234:	95 95       	asr	r25
 236:	87 95       	ror	r24
 238:	0a 94       	dec	r0
 23a:	e2 f7       	brpl	.-8      	; 0x234 <WriteDisplay+0x62>
		if(temp) 	{PORTC |= 	(1<<TWI_SDA);}		// If "1" SDA high
 23c:	88 23       	and	r24, r24
 23e:	11 f0       	breq	.+4      	; 0x244 <WriteDisplay+0x72>
 240:	a9 9a       	sbi	0x15, 1	; 21
 242:	01 c0       	rjmp	.+2      	; 0x246 <WriteDisplay+0x74>
		else 		{PORTC &=	~(1<<TWI_SDA);}		// If "0" SDA low
 244:	a9 98       	cbi	0x15, 1	; 21
		asm volatile ("nop");						// 2 Takte Warten
 246:	00 00       	nop
		asm volatile ("nop");						// 2 Takte Warten
 248:	00 00       	nop
		PORTC |= 	(1<<TWI_SCL);					// SCL high
 24a:	a8 9a       	sbi	0x15, 0	; 21
		asm volatile ("nop");						// 2 Takte Warten
 24c:	00 00       	nop
		asm volatile ("nop");						// 2 Takte Warten
 24e:	00 00       	nop
		PORTC &=	~(1<<TWI_SCL);					// SCL low
 250:	a8 98       	cbi	0x15, 0	; 21
 252:	41 50       	subi	r20, 0x01	; 1
 254:	50 40       	sbci	r21, 0x00	; 0
	d1 =		(channel-d2*100)/10;	// zehner
	d0 =		channel % 10;			// einer

	// Schreiben auf Display; MSB voraus
	// Schreiben der dritten Stelle
	for(i=0;i<=7;i++){
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	4f 3f       	cpi	r20, 0xFF	; 255
 25a:	58 07       	cpc	r21, r24
 25c:	01 f7       	brne	.-64     	; 0x21e <WriteDisplay+0x4c>
 25e:	47 e0       	ldi	r20, 0x07	; 7
 260:	50 e0       	ldi	r21, 0x00	; 0
		asm volatile ("nop");						// 2 Takte Warten
		PORTC &=	~(1<<TWI_SCL);					// SCL low
	}
	// Schreiben der zweiten Stelle
	for(i=0;i<=7;i++){
		temp = 	sieben_seg[d1] & (1<<(7-i)); 		// Maske! Beginnend mit MSB
 262:	e1 2f       	mov	r30, r17
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	e0 5a       	subi	r30, 0xA0	; 160
 268:	fe 4f       	sbci	r31, 0xFE	; 254
 26a:	60 81       	ld	r22, Z
		temp = 	(temp>>(7-i));						// Bit schieben auf Position Null
 26c:	a1 e0       	ldi	r26, 0x01	; 1
 26e:	b0 e0       	ldi	r27, 0x00	; 0
 270:	cd 01       	movw	r24, r26
 272:	04 2e       	mov	r0, r20
 274:	02 c0       	rjmp	.+4      	; 0x27a <WriteDisplay+0xa8>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	0a 94       	dec	r0
 27c:	e2 f7       	brpl	.-8      	; 0x276 <WriteDisplay+0xa4>
 27e:	86 23       	and	r24, r22
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	04 2e       	mov	r0, r20
 284:	02 c0       	rjmp	.+4      	; 0x28a <WriteDisplay+0xb8>
 286:	95 95       	asr	r25
 288:	87 95       	ror	r24
 28a:	0a 94       	dec	r0
 28c:	e2 f7       	brpl	.-8      	; 0x286 <WriteDisplay+0xb4>
		if(temp) 	{PORTC |= 	(1<<TWI_SDA);}		// If "1" SDA high
 28e:	88 23       	and	r24, r24
 290:	11 f0       	breq	.+4      	; 0x296 <WriteDisplay+0xc4>
 292:	a9 9a       	sbi	0x15, 1	; 21
 294:	01 c0       	rjmp	.+2      	; 0x298 <WriteDisplay+0xc6>
		else 		{PORTC &=	~(1<<TWI_SDA);}		// If "0" SDA low
 296:	a9 98       	cbi	0x15, 1	; 21
		asm volatile ("nop");						// 2 Takte Warten
 298:	00 00       	nop
		asm volatile ("nop");						// 2 Takte Warten
 29a:	00 00       	nop
		PORTC |= 	(1<<TWI_SCL);					// SCL high
 29c:	a8 9a       	sbi	0x15, 0	; 21
		asm volatile ("nop");						// 2 Takte Warten
 29e:	00 00       	nop
		asm volatile ("nop");						// 2 Takte Warten
 2a0:	00 00       	nop
		PORTC &=	~(1<<TWI_SCL);					// SCL low
 2a2:	a8 98       	cbi	0x15, 0	; 21
 2a4:	41 50       	subi	r20, 0x01	; 1
 2a6:	50 40       	sbci	r21, 0x00	; 0
		asm volatile ("nop");						// 2 Takte Warten
		asm volatile ("nop");						// 2 Takte Warten
		PORTC &=	~(1<<TWI_SCL);					// SCL low
	}
	// Schreiben der zweiten Stelle
	for(i=0;i<=7;i++){
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	4f 3f       	cpi	r20, 0xFF	; 255
 2ac:	58 07       	cpc	r21, r24
 2ae:	01 f7       	brne	.-64     	; 0x270 <WriteDisplay+0x9e>
 2b0:	47 e0       	ldi	r20, 0x07	; 7
 2b2:	50 e0       	ldi	r21, 0x00	; 0
		asm volatile ("nop");						// 2 Takte Warten
		PORTC &=	~(1<<TWI_SCL);					// SCL low
	}
	// Schreiben der ersten Stelle
	for(i=0;i<=7;i++){
		temp = 	sieben_seg[d0] & (1<<(7-i)); 		// Maske! Beginnend mit MSB
 2b4:	e3 2f       	mov	r30, r19
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	e0 5a       	subi	r30, 0xA0	; 160
 2ba:	fe 4f       	sbci	r31, 0xFE	; 254
 2bc:	e0 81       	ld	r30, Z
		temp = 	(temp>>(7-i));						// Bit schieben auf Position Null
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	cb 01       	movw	r24, r22
 2c4:	04 2e       	mov	r0, r20
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <WriteDisplay+0xfa>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	0a 94       	dec	r0
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <WriteDisplay+0xf6>
 2d0:	8e 23       	and	r24, r30
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	04 2e       	mov	r0, r20
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <WriteDisplay+0x10a>
 2d8:	95 95       	asr	r25
 2da:	87 95       	ror	r24
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <WriteDisplay+0x106>
 2e0:	98 2f       	mov	r25, r24
		if(temp) 	{PORTC |= 	(1<<TWI_SDA);}		// If "1" SDA high
 2e2:	88 23       	and	r24, r24
 2e4:	11 f0       	breq	.+4      	; 0x2ea <WriteDisplay+0x118>
 2e6:	a9 9a       	sbi	0x15, 1	; 21
 2e8:	01 c0       	rjmp	.+2      	; 0x2ec <WriteDisplay+0x11a>
		else 		{PORTC &=	~(1<<TWI_SDA);}		// If "0" SDA low
 2ea:	a9 98       	cbi	0x15, 1	; 21
		asm volatile ("nop");						// 2 Takte Warten
 2ec:	00 00       	nop
		asm volatile ("nop");						// 2 Takte Warten
 2ee:	00 00       	nop
		PORTC |= 	(1<<TWI_SCL);					// SCL high
 2f0:	a8 9a       	sbi	0x15, 0	; 21
		asm volatile ("nop");						// 2 Takte Warten
 2f2:	00 00       	nop
		asm volatile ("nop");						// 2 Takte Warten
 2f4:	00 00       	nop
		PORTC &=	~(1<<TWI_SCL);					// SCL low
 2f6:	a8 98       	cbi	0x15, 0	; 21
 2f8:	41 50       	subi	r20, 0x01	; 1
 2fa:	50 40       	sbci	r21, 0x00	; 0
		asm volatile ("nop");						// 2 Takte Warten
		asm volatile ("nop");						// 2 Takte Warten
		PORTC &=	~(1<<TWI_SCL);					// SCL low
	}
	// Schreiben der ersten Stelle
	for(i=0;i<=7;i++){
 2fc:	8f ef       	ldi	r24, 0xFF	; 255
 2fe:	4f 3f       	cpi	r20, 0xFF	; 255
 300:	58 07       	cpc	r21, r24
 302:	f9 f6       	brne	.-66     	; 0x2c2 <WriteDisplay+0xf0>
		asm volatile ("nop");						// 2 Takte Warten
		PORTC &=	~(1<<TWI_SCL);					// SCL low
	}
	
	// Additonal Takt
	PORTC &=	~(temp<<TWI_SDA);
 304:	85 b3       	in	r24, 0x15	; 21
 306:	99 0f       	add	r25, r25
 308:	90 95       	com	r25
 30a:	98 23       	and	r25, r24
 30c:	95 bb       	out	0x15, r25	; 21
	asm volatile ("nop");						// 2 Takte Warten
 30e:	00 00       	nop
	asm volatile ("nop");						// 2 Takte Warten
 310:	00 00       	nop
	PORTC |= 	(1<<TWI_SCL);					// SCL high
 312:	a8 9a       	sbi	0x15, 0	; 21
	asm volatile ("nop");						// 2 Takte Warten
 314:	00 00       	nop
	asm volatile ("nop");						// 2 Takte Warten
 316:	00 00       	nop
	PORTC &=	~(1<<TWI_SCL);					// SCL low
 318:	a8 98       	cbi	0x15, 0	; 21

}
 31a:	1f 91       	pop	r17
 31c:	08 95       	ret

0000031e <InitDisplay>:

void InitDisplay(void) {
		PORTC &= 	~(1<<TWI_SDA);						// Data line zero "0"
 31e:	a9 98       	cbi	0x15, 1	; 21
 320:	80 e0       	ldi	r24, 0x00	; 0
		for(unsigned char i=0;i<=21;i++) {
			PORTC |= 	(1<<TWI_SCL);					// SCL high
 322:	a8 9a       	sbi	0x15, 0	; 21
			asm volatile ("nop");						// 2 Takte Warten
 324:	00 00       	nop
			asm volatile ("nop");						// 2 Takte Warten
 326:	00 00       	nop
			PORTC &=	~(1<<TWI_SCL);					// SCL low
 328:	a8 98       	cbi	0x15, 0	; 21
			asm volatile ("nop");						// 2 Takte Warten
 32a:	00 00       	nop
			asm volatile ("nop");						// 2 Takte Warten
 32c:	00 00       	nop

}

void InitDisplay(void) {
		PORTC &= 	~(1<<TWI_SDA);						// Data line zero "0"
		for(unsigned char i=0;i<=21;i++) {
 32e:	8f 5f       	subi	r24, 0xFF	; 255
 330:	86 31       	cpi	r24, 0x16	; 22
 332:	b9 f7       	brne	.-18     	; 0x322 <InitDisplay+0x4>
			asm volatile ("nop");						// 2 Takte Warten
			PORTC &=	~(1<<TWI_SCL);					// SCL low
			asm volatile ("nop");						// 2 Takte Warten
			asm volatile ("nop");						// 2 Takte Warten
		}
}
 334:	08 95       	ret

00000336 <Rj45Leds>:

void Rj45Leds(void) {
	static unsigned char ledCount =0;
	if(ledCount > 50) {	// ->every second
 336:	80 91 6c 01 	lds	r24, 0x016C
 33a:	83 33       	cpi	r24, 0x33	; 51
 33c:	30 f0       	brcs	.+12     	; 0x34a <Rj45Leds+0x14>
		PORTC ^= 	(1<<R_LED_YELLOW)|(1<<R_LED_GREEN)|(1<<L_LED_YELLOW)|(1<<L_LED_GREEN); 	//toggle LEDs
 33e:	85 b3       	in	r24, 0x15	; 21
 340:	90 ef       	ldi	r25, 0xF0	; 240
 342:	89 27       	eor	r24, r25
 344:	85 bb       	out	0x15, r24	; 21
		ledCount =	0;
 346:	10 92 6c 01 	sts	0x016C, r1
	}
	ledCount++;
 34a:	80 91 6c 01 	lds	r24, 0x016C
 34e:	8f 5f       	subi	r24, 0xFF	; 255
 350:	80 93 6c 01 	sts	0x016C, r24
}
 354:	08 95       	ret

00000356 <main>:


// Main Programm********************************

int main(void) {
 356:	ff 92       	push	r15
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29

	unsigned char muell;

	PortConfig();
 360:	0e 94 78 00 	call	0xf0	; 0xf0 <PortConfig>


void PwmConfig(void){ 	// kontrolliert KW21/2014 -> OK
	//TC0****************
	// Fast PWM Mode, Cleare OC0 on compare match (non inverting), clk/256
	TCCR0 = 	(1<<WGM00)|(1<<WGM01)|(2<<COM00)|(4<<CS00); 
 364:	8c e6       	ldi	r24, 0x6C	; 108
 366:	83 bf       	out	0x33, r24	; 51
	
	//TC1****************
	// Fast PWM in non inverting mode; 8-bit bottom to top; clk/256
	TCCR1A =	(2<<COM1A0)|(2<<COM1B0)|(1<<WGM10);
 368:	81 ea       	ldi	r24, 0xA1	; 161
 36a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B =	(1<<WGM12)|(4<<CS10);
 36c:	8c e0       	ldi	r24, 0x0C	; 12
 36e:	8e bd       	out	0x2e, r24	; 46

	//TC2****************
	// Fast PWM in non inverting mode; (8-bit bottom to top by default in TC2); clk/256
	TCCR2 =		(1<<WGM20)|(1<<WGM21)|(2<<COM20)|(6<<CS20);
 370:	8e e6       	ldi	r24, 0x6E	; 110
 372:	85 bd       	out	0x25, r24	; 37
	unsigned char muell;

	PortConfig();
	PwmConfig();
	// Start Values for PWM
		OCR1B =		0xA0;//200;			//red
 374:	80 ea       	ldi	r24, 0xA0	; 160
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	99 bd       	out	0x29, r25	; 41
 37a:	88 bd       	out	0x28, r24	; 40
		OCR1A =		0x20;//64;//128;	//green
 37c:	80 e2       	ldi	r24, 0x20	; 32
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	9b bd       	out	0x2b, r25	; 43
 382:	8a bd       	out	0x2a, r24	; 42
		OCR2 =		0;//128;			//blue
 384:	13 bc       	out	0x23, r1	; 35
		OCR0 = 		0xA0;			//white
 386:	80 ea       	ldi	r24, 0xA0	; 160
 388:	8c bf       	out	0x3c, r24	; 60
	UartConfig();
 38a:	0e 94 88 00 	call	0x110	; 0x110 <UartConfig>
	dmxChannel = 	GetSelectedDmxChannel();
 38e:	0e 94 9f 00 	call	0x13e	; 0x13e <GetSelectedDmxChannel>
 392:	90 93 6e 01 	sts	0x016E, r25
 396:	80 93 6d 01 	sts	0x016D, r24

//	dmxChannel = 1;	//Testing

	WriteDisplay(dmxChannel);
 39a:	80 91 6d 01 	lds	r24, 0x016D
 39e:	90 91 6e 01 	lds	r25, 0x016E
 3a2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <WriteDisplay>
	PORTC &= 	~((1<<R_LED_YELLOW)|(1<<R_LED_GREEN)|(1<<L_LED_YELLOW)|(1<<L_LED_GREEN)); // All LEDs on
 3a6:	85 b3       	in	r24, 0x15	; 21
 3a8:	8f 70       	andi	r24, 0x0F	; 15
 3aa:	85 bb       	out	0x15, r24	; 21
//	startup();	// Test Routin. After this Routin all Lights are set to 50%
	InitDisplay();
 3ac:	0e 94 8f 01 	call	0x31e	; 0x31e <InitDisplay>
	port = 1;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	90 93 74 03 	sts	0x0374, r25
 3b8:	80 93 73 03 	sts	0x0373, r24
	port_alt = 0;
 3bc:	10 92 72 01 	sts	0x0172, r1
 3c0:	10 92 71 01 	sts	0x0171, r1
	sei();		// Global interrupt enable
 3c4:	78 94       	sei
		
		// Abfangen, falls kein DMX Kanal gewählt ist (dmxCannel = 0)
		if(dmxChannel ==0){
			cli();	// Somit DMX off

			OCR1B =		0xA0;//200;			//red
 3c6:	00 ea       	ldi	r16, 0xA0	; 160
 3c8:	10 e0       	ldi	r17, 0x00	; 0
			OCR1A =		0x20;//64;//128;	//green
 3ca:	c0 e2       	ldi	r28, 0x20	; 32
 3cc:	d0 e0       	ldi	r29, 0x00	; 0
			OCR2 =		0;//128;			//blue
			OCR0 = 		0xA0;				//white
 3ce:	50 ea       	ldi	r21, 0xA0	; 160
 3d0:	f5 2e       	mov	r15, r21
		//Common code begin 
		

		// If DIP-Switch changes, read selected DMX Chanel and write the Chanel to the Display
		// (Bit 8 of DIP-Switch is not considered yet)
		port = PINA | ((PINB & (1<<S9)) << 8);	// The ninth bit is in Port B on position S9 (=Bit 0)
 3d2:	29 b3       	in	r18, 0x19	; 25
 3d4:	86 b3       	in	r24, 0x16	; 22
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	81 70       	andi	r24, 0x01	; 1
 3da:	90 70       	andi	r25, 0x00	; 0
 3dc:	98 2f       	mov	r25, r24
 3de:	88 27       	eor	r24, r24
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	82 2b       	or	r24, r18
 3e4:	93 2b       	or	r25, r19
 3e6:	90 93 74 03 	sts	0x0374, r25
 3ea:	80 93 73 03 	sts	0x0373, r24
		if (port != port_alt) {
 3ee:	20 91 73 03 	lds	r18, 0x0373
 3f2:	30 91 74 03 	lds	r19, 0x0374
 3f6:	80 91 71 01 	lds	r24, 0x0171
 3fa:	90 91 72 01 	lds	r25, 0x0172
 3fe:	28 17       	cp	r18, r24
 400:	39 07       	cpc	r19, r25
 402:	f1 f0       	breq	.+60     	; 0x440 <main+0xea>
			cli();
 404:	f8 94       	cli
			port_alt = PINA | ((PINB & (1<<S9)) << 8);
 406:	29 b3       	in	r18, 0x19	; 25
 408:	86 b3       	in	r24, 0x16	; 22
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	81 70       	andi	r24, 0x01	; 1
 40e:	90 70       	andi	r25, 0x00	; 0
 410:	98 2f       	mov	r25, r24
 412:	88 27       	eor	r24, r24
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	82 2b       	or	r24, r18
 418:	93 2b       	or	r25, r19
 41a:	90 93 72 01 	sts	0x0172, r25
 41e:	80 93 71 01 	sts	0x0171, r24
			dmxChannel = 	GetSelectedDmxChannel();
 422:	0e 94 9f 00 	call	0x13e	; 0x13e <GetSelectedDmxChannel>
 426:	90 93 6e 01 	sts	0x016E, r25
 42a:	80 93 6d 01 	sts	0x016D, r24
			InitDisplay();
 42e:	0e 94 8f 01 	call	0x31e	; 0x31e <InitDisplay>
			WriteDisplay(dmxChannel);
 432:	80 91 6d 01 	lds	r24, 0x016D
 436:	90 91 6e 01 	lds	r25, 0x016E
 43a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <WriteDisplay>
		
			sei();
 43e:	78 94       	sei
		}
			
		// Detecting DMX Break with frame error fleg
		// Will be called approx. every 20ms with 250kBoud and 512 DMX
		if (UCSRA & (1<<FE)) {
 440:	5c 9b       	sbis	0x0b, 4	; 11
 442:	3b c0       	rjmp	.+118    	; 0x4ba <__stack+0x5b>
			channelCounter =	0;	// Initialize dmx channel counter
 444:	10 92 70 01 	sts	0x0170, r1
 448:	10 92 6f 01 	sts	0x016F, r1
			OCR1B =	eye_correction[dmxData[dmxChannel]];		// PWM R
 44c:	e0 91 6d 01 	lds	r30, 0x016D
 450:	f0 91 6e 01 	lds	r31, 0x016E
 454:	ed 58       	subi	r30, 0x8D	; 141
 456:	fe 4f       	sbci	r31, 0xFE	; 254
 458:	e0 81       	ld	r30, Z
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	e0 5a       	subi	r30, 0xA0	; 160
 45e:	ff 4f       	sbci	r31, 0xFF	; 255
 460:	80 81       	ld	r24, Z
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	99 bd       	out	0x29, r25	; 41
 466:	88 bd       	out	0x28, r24	; 40
			OCR1A = eye_correction[dmxData[dmxChannel + 1]];	// PWM G
 468:	e0 91 6d 01 	lds	r30, 0x016D
 46c:	f0 91 6e 01 	lds	r31, 0x016E
 470:	ec 58       	subi	r30, 0x8C	; 140
 472:	fe 4f       	sbci	r31, 0xFE	; 254
 474:	e0 81       	ld	r30, Z
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	e0 5a       	subi	r30, 0xA0	; 160
 47a:	ff 4f       	sbci	r31, 0xFF	; 255
 47c:	80 81       	ld	r24, Z
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	9b bd       	out	0x2b, r25	; 43
 482:	8a bd       	out	0x2a, r24	; 42
			OCR2 = 	eye_correction[dmxData[dmxChannel + 2]];	// PWM B
 484:	e0 91 6d 01 	lds	r30, 0x016D
 488:	f0 91 6e 01 	lds	r31, 0x016E
 48c:	eb 58       	subi	r30, 0x8B	; 139
 48e:	fe 4f       	sbci	r31, 0xFE	; 254
 490:	e0 81       	ld	r30, Z
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	e0 5a       	subi	r30, 0xA0	; 160
 496:	ff 4f       	sbci	r31, 0xFF	; 255
 498:	80 81       	ld	r24, Z
 49a:	83 bd       	out	0x23, r24	; 35
			OCR0 =	eye_correction[dmxData[dmxChannel + 3]];	// PWM W
 49c:	e0 91 6d 01 	lds	r30, 0x016D
 4a0:	f0 91 6e 01 	lds	r31, 0x016E
 4a4:	ea 58       	subi	r30, 0x8A	; 138
 4a6:	fe 4f       	sbci	r31, 0xFE	; 254
 4a8:	e0 81       	ld	r30, Z
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	e0 5a       	subi	r30, 0xA0	; 160
 4ae:	ff 4f       	sbci	r31, 0xFF	; 255
 4b0:	80 81       	ld	r24, Z
 4b2:	8c bf       	out	0x3c, r24	; 60
			muell =	UDR;	// reading UDR set the error fleg to zero
 4b4:	8c b1       	in	r24, 0x0c	; 12
			Rj45Leds();
 4b6:	0e 94 9b 01 	call	0x336	; 0x336 <Rj45Leds>
		}
		
		// Abfangen, falls kein DMX Kanal gewählt ist (dmxCannel = 0)
		if(dmxChannel ==0){
 4ba:	80 91 6d 01 	lds	r24, 0x016D
 4be:	90 91 6e 01 	lds	r25, 0x016E
 4c2:	89 2b       	or	r24, r25
 4c4:	41 f4       	brne	.+16     	; 0x4d6 <__stack+0x77>
			cli();	// Somit DMX off
 4c6:	f8 94       	cli

			OCR1B =		0xA0;//200;			//red
 4c8:	19 bd       	out	0x29, r17	; 41
 4ca:	08 bd       	out	0x28, r16	; 40
			OCR1A =		0x20;//64;//128;	//green
 4cc:	db bd       	out	0x2b, r29	; 43
 4ce:	ca bd       	out	0x2a, r28	; 42
			OCR2 =		0;//128;			//blue
 4d0:	13 bc       	out	0x23, r1	; 35
			OCR0 = 		0xA0;				//white
 4d2:	fc be       	out	0x3c, r15	; 60
 4d4:	7e cf       	rjmp	.-260    	; 0x3d2 <main+0x7c>
		}
		else	sei();
 4d6:	78 94       	sei
 4d8:	7c cf       	rjmp	.-264    	; 0x3d2 <main+0x7c>

000004da <__udivmodhi4>:
 4da:	aa 1b       	sub	r26, r26
 4dc:	bb 1b       	sub	r27, r27
 4de:	51 e1       	ldi	r21, 0x11	; 17
 4e0:	07 c0       	rjmp	.+14     	; 0x4f0 <__udivmodhi4_ep>

000004e2 <__udivmodhi4_loop>:
 4e2:	aa 1f       	adc	r26, r26
 4e4:	bb 1f       	adc	r27, r27
 4e6:	a6 17       	cp	r26, r22
 4e8:	b7 07       	cpc	r27, r23
 4ea:	10 f0       	brcs	.+4      	; 0x4f0 <__udivmodhi4_ep>
 4ec:	a6 1b       	sub	r26, r22
 4ee:	b7 0b       	sbc	r27, r23

000004f0 <__udivmodhi4_ep>:
 4f0:	88 1f       	adc	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	5a 95       	dec	r21
 4f6:	a9 f7       	brne	.-22     	; 0x4e2 <__udivmodhi4_loop>
 4f8:	80 95       	com	r24
 4fa:	90 95       	com	r25
 4fc:	bc 01       	movw	r22, r24
 4fe:	cd 01       	movw	r24, r26
 500:	08 95       	ret

00000502 <_exit>:
 502:	f8 94       	cli

00000504 <__stop_program>:
 504:	ff cf       	rjmp	.-2      	; 0x504 <__stop_program>
