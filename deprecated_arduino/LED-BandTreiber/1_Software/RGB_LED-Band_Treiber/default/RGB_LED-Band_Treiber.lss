
RGB_LED-Band_Treiber.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000001da  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000208  0080006c  0080006c  0000027a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000fa  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001ff  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e7  00000000  00000000  00000593  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000253  00000000  00000000  0000067a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  000008d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000159  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  00000aa9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	12 e0       	ldi	r17, 0x02	; 2
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  8a:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_11>:
const unsigned char UBRR_PC = 51;	// Baud 9600 for PC(USB) comunication
const unsigned char UBRR_DMX = 	1;	// Baud 250000 for DMX(RS485) comunication

//Interrupt Routinen******************

ISR(USART_RXC_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	ef 93       	push	r30
  a4:	ff 93       	push	r31
//		OCR1B =	uart_data[0];	// PWM Red
//		OCR1A = uart_data[1];	// PWM Green
//		OCR2 = 	uart_data[2];	// PWM Blue
//	}
//	else {
		dmx_data[channel_counter] =	UDR;
  a6:	80 91 6c 00 	lds	r24, 0x006C
  aa:	90 91 6d 00 	lds	r25, 0x006D
  ae:	2c b1       	in	r18, 0x0c	; 12
  b0:	fc 01       	movw	r30, r24
  b2:	ec 58       	subi	r30, 0x8C	; 140
  b4:	ff 4f       	sbci	r31, 0xFF	; 255
  b6:	20 83       	st	Z, r18
		channel_counter = channel_counter+1;
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	90 93 6d 00 	sts	0x006D, r25
  be:	80 93 6c 00 	sts	0x006C, r24
//		PORTA = 	sieben_seg[2];
//	}
}
  c2:	ff 91       	pop	r31
  c4:	ef 91       	pop	r30
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	2f 91       	pop	r18
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <__vector_19>:

ISR(TIMER0_COMP_vect) {
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
	OCR1B =	dmx_data[4];	// PWM Red
  e4:	80 91 78 00 	lds	r24, 0x0078
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	99 bd       	out	0x29, r25	; 41
  ec:	88 bd       	out	0x28, r24	; 40
	OCR1A = dmx_data[5];	// PWM Green
  ee:	80 91 79 00 	lds	r24, 0x0079
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	9b bd       	out	0x2b, r25	; 43
  f6:	8a bd       	out	0x2a, r24	; 42
	OCR2 = 	dmx_data[6];	// PWM Blue
  f8:	80 91 7a 00 	lds	r24, 0x007A
  fc:	83 bd       	out	0x23, r24	; 35
}
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <config>:

//Functions***************************

void config(void){
	// Port direction
	DDRA =	(1<<PA7)|(1<<PA6)|(1<<PA5)|(1<<PA4)|(1<<PA3)|(1<<PA2)|(1<<PA1)|(1<<PA0);	//Port A Output
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	8a bb       	out	0x1a, r24	; 26
	
	DDRB &=		~(1<<PB2);	//Pin PB2 is input (CBUS3 of FTDI Chip; PWREN#)
 110:	ba 98       	cbi	0x17, 2	; 23
	PORTB &=	~(1<<PB2);	// deactivate internal PullUp Resistor	
 112:	c2 98       	cbi	0x18, 2	; 24
	
	DDRC =		(1<<PC4)|(1<<PC3)|(1<<PC2);	// /CAN_EN, /RE_RS485, DE_RS485
 114:	8c e1       	ldi	r24, 0x1C	; 28
 116:	84 bb       	out	0x14, r24	; 20
	PORTC =		(1<<PC4);	// activate internal PullUp for /CAN_EN. Transmitter is off by default
 118:	80 e1       	ldi	r24, 0x10	; 16
 11a:	85 bb       	out	0x15, r24	; 21
	
	DDRD &=		~(1<<PD3)|~(1<<PD2);	//CBUS2(TXEN) and /INT MCP2515 are inputs
 11c:	81 b3       	in	r24, 0x11	; 17
 11e:	81 bb       	out	0x11, r24	; 17
	DDRD =		(1<<PD7)|(1<<PD5)|(1<<PD4); // OC2, OC1A and OC1B must be set as Output to enable PWM output driver
 120:	80 eb       	ldi	r24, 0xB0	; 176
 122:	81 bb       	out	0x11, r24	; 17
	PORTD &=	~(1<<PD3)|~(1<<PD2);	// disable internal PullUp Resistor
 124:	82 b3       	in	r24, 0x12	; 18
 126:	82 bb       	out	0x12, r24	; 18
}
 128:	08 95       	ret

0000012a <pwm_config>:

void pwm_config(void){
	//TC1
	// Fast PWM in non inverting mode; 8-bit bottom to top; clk/256
	TCCR1A =	(2<<COM1A0)|(2<<COM1B0)|(1<<WGM10);
 12a:	81 ea       	ldi	r24, 0xA1	; 161
 12c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B =	(1<<WGM12)|(4<<CS10);
 12e:	8c e0       	ldi	r24, 0x0C	; 12
 130:	8e bd       	out	0x2e, r24	; 46
	// Initialization of Output Compare Register's to 50% duty cycle
	OCR1A =		0xF0;	// =50% of 0xFF
 132:	80 ef       	ldi	r24, 0xF0	; 240
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	9b bd       	out	0x2b, r25	; 43
 138:	8a bd       	out	0x2a, r24	; 42
	OCR1B =		0xF0;	// =5ß% of 0xFF
 13a:	99 bd       	out	0x29, r25	; 41
 13c:	88 bd       	out	0x28, r24	; 40
	
	//TC2
	// Fast PWM in non inverting mode; (8-bit bottom to top by default in TC2); clk/256
	TCCR2 =		(1<<WGM20)|(1<<WGM21)|(2<<COM20)|(6<<CS20);
 13e:	8e e6       	ldi	r24, 0x6E	; 110
 140:	85 bd       	out	0x25, r24	; 37
	// Initialization of Output Compare Register
	OCR2 =		0x20;	// =50% of 0xFF
 142:	80 e2       	ldi	r24, 0x20	; 32
 144:	83 bd       	out	0x23, r24	; 35
	}
 146:	08 95       	ret

00000148 <timer_conter_0_config>:

void timer_conter_0_config(void) {
	// Timer Counter 0
	// CTC,clk/1024
	TCCR0 = 	(2<<WGM00)|(3<<CS00);
 148:	83 e8       	ldi	r24, 0x83	; 131
 14a:	83 bf       	out	0x33, r24	; 51
	TIMSK = 	(1<<OCIE0);	// Compare Inerrupt Enalbe
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	89 bf       	out	0x39, r24	; 57
}
 150:	08 95       	ret

00000152 <uart_config>:
	unsigned char 	sreg;
//	sreg 	= 	SREG;		// Save Global Interrupt Flag
//	cli();					// Disable global interrupt
	// Check TXC and RXC Flag
	// Set baud rate
	if(usart_selection) {
 152:	88 23       	and	r24, r24
 154:	59 f0       	breq	.+22     	; 0x16c <uart_config+0x1a>
		UBRRH = (unsigned char) (UBRR_PC>>8);
 156:	10 bc       	out	0x20, r1	; 32
		UBRRL = (unsigned char) UBRR_PC;
 158:	83 e3       	ldi	r24, 0x33	; 51
 15a:	89 b9       	out	0x09, r24	; 9
		// enable receiver, enable receiver inerrupt
		UCSRB =		(1<<RXEN)|(1<<RXCIE);	
 15c:	80 e9       	ldi	r24, 0x90	; 144
 15e:	8a b9       	out	0x0a, r24	; 10
		// 1stop bit, 8 bit
		UCSRC =		(1<<URSEL)|(3<<UCSZ0);
 160:	86 e8       	ldi	r24, 0x86	; 134
 162:	80 bd       	out	0x20, r24	; 32
		// disable R485 chip
		PORTC = 	(1<<PC3);	// /RE = High
 164:	88 e0       	ldi	r24, 0x08	; 8
 166:	85 bb       	out	0x15, r24	; 21
		PORTC &=	~(1<<PC2); 	// DE = Low
 168:	aa 98       	cbi	0x15, 2	; 21
 16a:	08 95       	ret
	}
	else {
		UBRRH = (unsigned char) (UBRR_DMX>>8);
 16c:	10 bc       	out	0x20, r1	; 32
		UBRRL = (unsigned char) UBRR_DMX;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	89 b9       	out	0x09, r24	; 9
		// enable receiver, enable receiver inerrupt
		UCSRB =		(1<<RXEN)|(1<<RXCIE);	
 172:	80 e9       	ldi	r24, 0x90	; 144
 174:	8a b9       	out	0x0a, r24	; 10
		// 2stop bit, 8 bit
		UCSRC =		(1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
 176:	8e e8       	ldi	r24, 0x8E	; 142
 178:	80 bd       	out	0x20, r24	; 32
		//Enable receiver mode of the RS485 chip
		PORTC &= 	~(1<<PC3)|~(1<<PC2);	// /RE and DE low
 17a:	85 b3       	in	r24, 0x15	; 21
 17c:	85 bb       	out	0x15, r24	; 21

		PORTA = sieben_seg[8];
 17e:	80 e8       	ldi	r24, 0x80	; 128
 180:	8b bb       	out	0x1b, r24	; 27
 182:	08 95       	ret

00000184 <main>:
}

int main(void)
{
	unsigned char temp;
	config();
 184:	0e 94 86 00 	call	0x10c	; 0x10c <config>
	pwm_config();
 188:	0e 94 95 00 	call	0x12a	; 0x12a <pwm_config>
	uart_config(0);		// Config for DMX reception
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 a9 00 	call	0x152	; 0x152 <uart_config>
	PORTA = 	sieben_seg[4] & ~(1<<7);
 192:	89 e1       	ldi	r24, 0x19	; 25
 194:	8b bb       	out	0x1b, r24	; 27
	sei();		// Global interrupt enable
 196:	78 94       	sei
			OCR1B =	dmx_data[4];	// PWM Red
			OCR1A = dmx_data[5];	// PWM Green
			OCR2 = 	dmx_data[6];	// PWM Blue
		}
		else{
			OCR1B =		0xA0;	// Red
 198:	40 ea       	ldi	r20, 0xA0	; 160
 19a:	50 e0       	ldi	r21, 0x00	; 0
			OCR1A =		0x20;	// Green
 19c:	20 e2       	ldi	r18, 0x20	; 32
 19e:	30 e0       	ldi	r19, 0x00	; 0
//		if(!(PORTB & (1<<PB2))){
//			uart_config(1);		// Config UART for communication with the PC
//		}

		// Detecting DMX Break with frame error fleg
		if (UCSRA & (1<<FE)) {
 1a0:	5c 9b       	sbis	0x0b, 4	; 11
 1a2:	11 c0       	rjmp	.+34     	; 0x1c6 <main+0x42>
			channel_counter =	0;	// Initialize dmx channel counter
			dmx_data[0] =	UDR;	// reading UDR set the error fleg to zero
 1a4:	8c b1       	in	r24, 0x0c	; 12
 1a6:	80 93 74 00 	sts	0x0074, r24
			OCR1B =	dmx_data[4];	// PWM Red
 1aa:	80 91 78 00 	lds	r24, 0x0078
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	99 bd       	out	0x29, r25	; 41
 1b2:	88 bd       	out	0x28, r24	; 40
			OCR1A = dmx_data[5];	// PWM Green
 1b4:	80 91 79 00 	lds	r24, 0x0079
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	9b bd       	out	0x2b, r25	; 43
 1bc:	8a bd       	out	0x2a, r24	; 42
			OCR2 = 	dmx_data[6];	// PWM Blue
 1be:	80 91 7a 00 	lds	r24, 0x007A
 1c2:	83 bd       	out	0x23, r24	; 35
 1c4:	05 c0       	rjmp	.+10     	; 0x1d0 <main+0x4c>
		}
		else{
			OCR1B =		0xA0;	// Red
 1c6:	59 bd       	out	0x29, r21	; 41
 1c8:	48 bd       	out	0x28, r20	; 40
			OCR1A =		0x20;	// Green
 1ca:	3b bd       	out	0x2b, r19	; 43
 1cc:	2a bd       	out	0x2a, r18	; 42
			OCR2 =		0x00;;		// Blue
 1ce:	13 bc       	out	0x23, r1	; 35
		}
		temp = PORTC;
 1d0:	85 b3       	in	r24, 0x15	; 21
		PORTA = temp;
 1d2:	8b bb       	out	0x1b, r24	; 27
 1d4:	e5 cf       	rjmp	.-54     	; 0x1a0 <main+0x1c>

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
